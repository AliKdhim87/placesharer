{"version":3,"sources":["shared/component/formElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["ImageUpload","pickedFile","id","center","onInput","errorText","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","fileIsValid","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","ref","style","display","type","accept","onChange","event","target","files","length","src","alt","onClick","current","click","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useFrom","title","value","description","address","image","state","inputHandler","tags","setTags","history","useHistory","handleTagChange","tagName","name","checked","oldTags","includes","filter","tag","placeSubmitHandler","a","preventDefault","formData","FormData","append","inputs","userId","process","Authorization","token","push","tagInputs","PLACE_TAGS","forEach","tagInput","key","inputProps","onClear","asOverlay","onSubmit","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","disabled"],"mappings":"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","file":"static/js/18.2846f383.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport \"./ImageUpload.css\";\r\nimport Button from \"./Button\";\r\nconst ImageUpload = ({ id, center, onInput, errorText }) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n  const filePickerRef = useRef();\r\n  let pickedFile;\r\n  let fileIsValid = isValid;\r\n\r\n  useEffect(() => {\r\n    if (!file) return;\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event) => {\r\n    if (event.target.files || event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    onInput(id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => filePickerRef.current.click();\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        ref={filePickerRef}\r\n        id={id}\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}{\" \"}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useContext, Fragment, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./NewPlace.css\";\r\nimport Input from \"../../shared/component/formElements/Input\";\r\nimport Button from \"../../shared/component/formElements/Button\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH,\r\n} from \"../../shared/Util/validators\";\r\nimport useHttpClient from \"../../shared/hooks/http-hook\";\r\nimport { useFrom } from \"../../shared/hooks/form-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport ErrorModal from \"../../shared/component/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/component/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/component/formElements/ImageUpload\";\r\nimport { PLACE_TAGS } from \"../../shared/Util/constants\";\r\nimport { Checkbox } from \"@material-ui/core\";\r\n\r\nconst NewPlace = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [state, inputHandler] = useFrom(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      address: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      image: {\r\n        value: null,\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n  const [tags, setTags] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const handleTagChange = (event) => {\r\n    const tagName = event.target.name;\r\n    const checked = event.target.checked;\r\n    if (checked) {\r\n      setTags((oldTags) => {\r\n        return oldTags.includes(tagName) ? oldTags : [...oldTags, tagName];\r\n      });\r\n    } else {\r\n      setTags((oldTags) => {\r\n        return oldTags.includes(tagName)\r\n          ? oldTags.filter((tag) => tag !== tagName)\r\n          : oldTags;\r\n      });\r\n    }\r\n  };\r\n\r\n  const placeSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"title\", state.inputs.title.value);\r\n      formData.append(\"description\", state.inputs.description.value);\r\n      formData.append(\"address\", state.inputs.address.value);\r\n      formData.append(\"creator\", auth.userId);\r\n      formData.append(\"image\", state.inputs.image.value);\r\n      formData.append(\"tags\", tags);\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/places`,\r\n        \"POST\",\r\n        formData,\r\n        {\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      history.push(\"/\");\r\n    } catch (error) {}\r\n  };\r\n\r\n  const tagInputs = [];\r\n\r\n  PLACE_TAGS.forEach((tag) => {\r\n    const checked = tags.includes(tag.name);\r\n    const tagInput = (\r\n      <span key={tag.name}>\r\n        <label>\r\n          <Checkbox\r\n            name={tag.name}\r\n            checked={checked}\r\n            onChange={handleTagChange}\r\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n          />\r\n          {tag.title}\r\n        </label>\r\n        <span>&nbsp;&nbsp;</span>\r\n      </span>\r\n    );\r\n    tagInputs.push(tagInput);\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"fade-in\">\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <form className=\"place-form no-select\" onSubmit={placeSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title\"\r\n            onInput={inputHandler}\r\n          />\r\n          <ImageUpload\r\n            id={\"image\"}\r\n            onInput={inputHandler}\r\n            errorText=\"Please provide an image\"\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            type=\"text\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please enter a valid description (at least 5 characters).\"\r\n            onInput={inputHandler}\r\n          />\r\n\r\n          <Input\r\n            id=\"address\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Address\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid description address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          {tagInputs}\r\n          <Button type=\"submit\" disabled={!state.isValid}>\r\n            ADD PLACE\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default NewPlace;\r\n"],"sourceRoot":""}