{"version":3,"sources":["users/components/ResetEmail.js"],"names":["ResetEmail","token","useParams","useHttpClient","isLoading","error","sendRequest","clearError","useState","sendPassword","setSendPassword","useFrom","password","value","isValid","confirmpassword","state","inputHandler","resetPasswordSubmitHandler","event","a","preventDefault","newPassword","inputs","process","JSON","stringify","data","onClear","asOverlay","className","message","to","onSubmit","id","element","type","label","validators","VALIDATOR_MINLENGTH","errorText","onInput","disabled"],"mappings":"8OA6FeA,UAlFI,WACjB,IAAMC,EAAQC,cAAYD,MADH,EAG+BE,cAA9CC,EAHe,EAGfA,UAAWC,EAHI,EAGJA,MAAOC,EAHH,EAGGA,YAAaC,EAHhB,EAGgBA,WAHhB,EAIiBC,qBAJjB,mBAIhBC,EAJgB,KAIFC,EAJE,OAKOC,YAC5B,CACEC,SAAU,CACRC,MAAO,GACPC,SAAS,GAEXC,gBAAiB,CACfF,MAAO,GACPC,SAAS,KAGb,GAhBqB,mBAKhBE,EALgB,KAKTC,EALS,KAkBjBC,EAA0B,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACjCD,EAAME,iBAEAC,EAAc,CAClBV,SAAUI,EAAMO,OAAOX,SAASC,MAChCE,gBAAiBC,EAAMO,OAAOR,gBAAgBF,OALf,SAQ/BM,EAAME,iBARyB,SAUZf,EAAY,GAAD,OACzBkB,mDADyB,wBACwBvB,GACpD,OACAwB,KAAKC,UAAUJ,GACf,CACE,eAAgB,qBAfW,OAUzBK,EAVyB,OAmB/BjB,EAAgBiB,GAnBe,4GAAH,sDAwBhC,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAYtB,MAAOA,EAAOuB,QAASrB,IAClCH,GAAa,kBAAC,IAAD,CAAgByB,WAAS,IACtCpB,EACC,kBAAC,IAAD,CAAMqB,UAAU,6BACd,2BAAIrB,EAAasB,SACjB,kBAAC,IAAD,CAAQC,GAAG,SAAX,iBAGF,kBAAC,IAAD,CAAMF,UAAU,6BACd,0BAAMA,UAAU,aAAaG,SAAUf,GACrC,kBAAC,IAAD,CACEgB,GAAG,WACHC,QAAQ,QACRC,KAAK,WACLC,MAAM,eACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,wDACVC,QAASxB,IAEX,kBAAC,IAAD,CACEiB,GAAG,kBACHC,QAAQ,QACRC,KAAK,WACLC,MAAM,mBACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,wDACVC,QAASxB,IAEX,kBAAC,IAAD,CAAQmB,KAAK,SAASM,UAAW1B,EAAMF,SAAvC,uB","file":"static/js/15.f00890e5.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Card from \"../../shared/component/UIElements/Card\";\r\nimport Input from \"../../shared/component/formElements/Input\";\r\nimport Button from \"../../shared/component/formElements/Button\";\r\nimport ErrorModal from \"../../shared/component/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/component/UIElements/LoadingSpinner\";\r\nimport { useFrom } from \"../../shared/hooks/form-hook\";\r\nimport { VALIDATOR_MINLENGTH } from \"../../shared/Util/validators\";\r\nimport useHttpClient from \"../../shared/hooks/http-hook\";\r\nimport \"./UserItem.css\";\r\nconst ResetEmail = () => {\r\n  const token = useParams().token;\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [sendPassword, setSendPassword] = useState();\r\n  const [state, inputHandler] = useFrom(\r\n    {\r\n      password: {\r\n        value: \"\",\r\n        isValid: false\r\n      },\r\n      confirmpassword: {\r\n        value: \"\",\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n  const resetPasswordSubmitHandler = async event => {\r\n    event.preventDefault();\r\n\r\n    const newPassword = {\r\n      password: state.inputs.password.value,\r\n      confirmpassword: state.inputs.confirmpassword.value\r\n    };\r\n    try {\r\n      event.preventDefault();\r\n\r\n      const data = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/users/reset/${token}`,\r\n        \"POST\",\r\n        JSON.stringify(newPassword),\r\n        {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      );\r\n\r\n      setSendPassword(data);\r\n    } catch (error) {}\r\n  };\r\n  if (sendPassword) {\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && <LoadingSpinner asOverlay />}\r\n      {sendPassword ? (\r\n        <Card className='forget_password no-select'>\r\n          <p>{sendPassword.message}</p>\r\n          <Button to='/auth'>AUTHENTICATE</Button>\r\n        </Card>\r\n      ) : (\r\n        <Card className='forget_password no-select'>\r\n          <form className='place-form' onSubmit={resetPasswordSubmitHandler}>\r\n            <Input\r\n              id='password'\r\n              element='input'\r\n              type='password'\r\n              label='New password'\r\n              validators={[VALIDATOR_MINLENGTH(6)]}\r\n              errorText='Please enter a valid password, at least 6 characters.'\r\n              onInput={inputHandler}\r\n            />\r\n            <Input\r\n              id='confirmpassword'\r\n              element='input'\r\n              type='password'\r\n              label='confirm password'\r\n              validators={[VALIDATOR_MINLENGTH(6)]}\r\n              errorText='Please enter a valid password, at least 6 characters.'\r\n              onInput={inputHandler}\r\n            />\r\n            <Button type='submit' disabled={!state.isValid}>\r\n              Reset Password\r\n            </Button>\r\n          </form>\r\n        </Card>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ResetEmail;\r\n"],"sourceRoot":""}