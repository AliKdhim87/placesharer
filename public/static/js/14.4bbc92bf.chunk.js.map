{"version":3,"sources":["users/components/ForgetPassword.js"],"names":["ForgetPassword","useHttpClient","isLoading","error","sendRequest","clearError","useState","sendPassword","setSendPassword","useFrom","email","value","isValid","state","inputHandler","setFormData","emailSubmitHandler","event","a","inputs","preventDefault","process","JSON","stringify","data","className","message","onSubmit","id","element","type","label","validators","VALIDATOR_EMAIL","errorText","onInput","disabled","onClear","asOverlay"],"mappings":"sOAwEeA,UA9DQ,WAAO,IAAD,EAC2BC,cAA9CC,EADmB,EACnBA,UAAWC,EADQ,EACRA,MAAOC,EADC,EACDA,YAAaC,EADZ,EACYA,WADZ,EAEaC,qBAFb,mBAEpBC,EAFoB,KAENC,EAFM,OAGgBC,YACzC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,KAGb,GAVyB,mBAGpBC,EAHoB,KAGbC,EAHa,KAGCC,EAHD,KAYrBC,EAAkB,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACnBR,EAAQ,CAAEA,MAAOG,EAAMM,OAAOT,MAAMC,OADjB,SAGvBM,EAAMG,iBAHiB,SAKJhB,EAAY,GAAD,OACzBiB,wCADyB,iBAE5B,OACAC,KAAKC,UAAUb,GACf,CACE,eAAgB,qBAVG,OAKjBc,EALiB,OAcvBhB,EAAgBgB,GAdO,gDAgBvBT,IAhBuB,yDAAH,sDAoBxB,OACE,kBAAC,WAAD,KACGR,EACC,kBAAC,IAAD,CAAMkB,UAAU,6BACd,2BAAIlB,EAAamB,UAGnB,kBAAC,IAAD,CAAMD,UAAU,6BACd,0BAAMA,UAAU,aAAaE,SAAUX,GACrC,kBAAC,IAAD,CACEY,GAAG,QACHC,QAAQ,QACRC,KAAK,QACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,qCACVC,QAASrB,IAEX,kBAAC,IAAD,CAAQgB,KAAK,SAASM,UAAWvB,EAAMD,SAAvC,gBAMN,kBAAC,IAAD,CAAYT,MAAOA,EAAOkC,QAAShC,IAClCH,GAAa,kBAAC,IAAD,CAAgBoC,WAAS,O","file":"static/js/14.4bbc92bf.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport Card from \"../../shared/component/UIElements/Card\";\r\nimport Input from \"../../shared/component/formElements/Input\";\r\nimport Button from \"../../shared/component/formElements/Button\";\r\nimport ErrorModal from \"../../shared/component/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/component/UIElements/LoadingSpinner\";\r\nimport { useFrom } from \"../../shared/hooks/form-hook\";\r\nimport { VALIDATOR_EMAIL } from \"../../shared/Util/validators\";\r\nimport useHttpClient from \"../../shared/hooks/http-hook\";\r\nimport \"./UserItem.css\";\r\nconst ForgetPassword = () => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [sendPassword, setSendPassword] = useState();\r\n  const [state, inputHandler, setFormData] = useFrom(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n  const emailSubmitHandler = async event => {\r\n    const email = { email: state.inputs.email.value };\r\n    try {\r\n      event.preventDefault();\r\n\r\n      const data = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/users/forget`,\r\n        \"POST\",\r\n        JSON.stringify(email),\r\n        {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      );\r\n\r\n      setSendPassword(data);\r\n    } catch (error) {\r\n      setFormData();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {sendPassword ? (\r\n        <Card className='forget_password no-select'>\r\n          <p>{sendPassword.message}</p>\r\n        </Card>\r\n      ) : (\r\n        <Card className='forget_password no-select'>\r\n          <form className='place-form' onSubmit={emailSubmitHandler}>\r\n            <Input\r\n              id='email'\r\n              element='input'\r\n              type='email'\r\n              label='Email'\r\n              validators={[VALIDATOR_EMAIL()]}\r\n              errorText='Please enter a valid email address'\r\n              onInput={inputHandler}\r\n            />\r\n            <Button type='submit' disabled={!state.isValid}>\r\n              Send Email\r\n            </Button>\r\n          </form>\r\n        </Card>\r\n      )}\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && <LoadingSpinner asOverlay />}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ForgetPassword;\r\n"],"sourceRoot":""}